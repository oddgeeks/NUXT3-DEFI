/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace AvocadoMultisigStructs {
  export type ActionStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
    operation: PromiseOrValue<BigNumberish>;
  };

  export type ActionStructOutput = [string, string, BigNumber, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
    operation: BigNumber;
  };

  export type CastParamsStruct = {
    actions: AvocadoMultisigStructs.ActionStruct[];
    id: PromiseOrValue<BigNumberish>;
    avoNonce: PromiseOrValue<BigNumberish>;
    salt: PromiseOrValue<BytesLike>;
    source: PromiseOrValue<string>;
    metadata: PromiseOrValue<BytesLike>;
  };

  export type CastParamsStructOutput = [
    AvocadoMultisigStructs.ActionStructOutput[],
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    actions: AvocadoMultisigStructs.ActionStructOutput[];
    id: BigNumber;
    avoNonce: BigNumber;
    salt: string;
    source: string;
    metadata: string;
  };

  export type CastForwardParamsStruct = {
    gas: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
    validAfter: PromiseOrValue<BigNumberish>;
    validUntil: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type CastForwardParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    gas: BigNumber;
    gasPrice: BigNumber;
    validAfter: BigNumber;
    validUntil: BigNumber;
    value: BigNumber;
  };

  export type SignatureParamsStruct = {
    signature: PromiseOrValue<BytesLike>;
    signer: PromiseOrValue<string>;
  };

  export type SignatureParamsStructOutput = [string, string] & {
    signature: string;
    signer: string;
  };

  export type CastAuthorizedParamsStruct = {
    maxFee: PromiseOrValue<BigNumberish>;
    gasPrice: PromiseOrValue<BigNumberish>;
    validAfter: PromiseOrValue<BigNumberish>;
    validUntil: PromiseOrValue<BigNumberish>;
  };

  export type CastAuthorizedParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    maxFee: BigNumber;
    gasPrice: BigNumber;
    validAfter: BigNumber;
    validUntil: BigNumber;
  };
}

export interface AvoMultisigSafeInterface extends utils.Interface {
  functions: {
    "ACTION_TYPE_HASH()": FunctionFragment;
    "AUTHORIZED_FEE_COLLECTOR()": FunctionFragment;
    "AUTHORIZED_MAX_FEE()": FunctionFragment;
    "AUTHORIZED_MIN_FEE()": FunctionFragment;
    "CAST_AUTHORIZED_PARAMS_TYPE_HASH()": FunctionFragment;
    "CAST_AUTHORIZED_TYPE_HASH()": FunctionFragment;
    "CAST_FORWARD_PARAMS_TYPE_HASH()": FunctionFragment;
    "CAST_PARAMS_TYPE_HASH()": FunctionFragment;
    "CAST_TYPE_HASH()": FunctionFragment;
    "DEFAULT_CHAIN_ID()": FunctionFragment;
    "DOMAIN_SEPARATOR_NAME()": FunctionFragment;
    "DOMAIN_SEPARATOR_VERSION()": FunctionFragment;
    "MAX_SIGNERS_COUNT()": FunctionFragment;
    "TYPE_HASH()": FunctionFragment;
    "_afterUpgradeHook(address,bytes)": FunctionFragment;
    "_callTargets((address,bytes,uint256,uint256)[],uint256)": FunctionFragment;
    "addSigners(address[],uint8)": FunctionFragment;
    "avoForwarder()": FunctionFragment;
    "avoNonce()": FunctionFragment;
    "avoRegistry()": FunctionFragment;
    "avoSignersList()": FunctionFragment;
    "cast(((address,bytes,uint256,uint256)[],uint256,int256,bytes32,address,bytes),(uint256,uint256,uint256,uint256,uint256),(bytes,address)[])": FunctionFragment;
    "castAuthorized(((address,bytes,uint256,uint256)[],uint256,int256,bytes32,address,bytes),(uint256,uint256,uint256,uint256),(bytes,address)[])": FunctionFragment;
    "domainSeparatorV4()": FunctionFragment;
    "executeOperation(address[],uint256[],uint256[],address,bytes)": FunctionFragment;
    "getSigDigest(((address,bytes,uint256,uint256)[],uint256,int256,bytes32,address,bytes),(uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getSigDigestAuthorized(((address,bytes,uint256,uint256)[],uint256,int256,bytes32,address,bytes),(uint256,uint256,uint256,uint256))": FunctionFragment;
    "index()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isSigner(address)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "nonSequentialNonces(bytes32)": FunctionFragment;
    "occupyAvoNonces(uint88[])": FunctionFragment;
    "occupyNonSequentialNonces(bytes32[])": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeSignedMessage(bytes32)": FunctionFragment;
    "removeSigners(address[],uint8)": FunctionFragment;
    "requiredSigners()": FunctionFragment;
    "setRequiredSigners(uint8)": FunctionFragment;
    "signMessage(bytes32)": FunctionFragment;
    "signers()": FunctionFragment;
    "signersCount()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address,bytes)": FunctionFragment;
    "verify(((address,bytes,uint256,uint256)[],uint256,int256,bytes32,address,bytes),(uint256,uint256,uint256,uint256,uint256),(bytes,address)[])": FunctionFragment;
    "verifyAuthorized(((address,bytes,uint256,uint256)[],uint256,int256,bytes32,address,bytes),(uint256,uint256,uint256,uint256),(bytes,address)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACTION_TYPE_HASH"
      | "AUTHORIZED_FEE_COLLECTOR"
      | "AUTHORIZED_MAX_FEE"
      | "AUTHORIZED_MIN_FEE"
      | "CAST_AUTHORIZED_PARAMS_TYPE_HASH"
      | "CAST_AUTHORIZED_TYPE_HASH"
      | "CAST_FORWARD_PARAMS_TYPE_HASH"
      | "CAST_PARAMS_TYPE_HASH"
      | "CAST_TYPE_HASH"
      | "DEFAULT_CHAIN_ID"
      | "DOMAIN_SEPARATOR_NAME"
      | "DOMAIN_SEPARATOR_VERSION"
      | "MAX_SIGNERS_COUNT"
      | "TYPE_HASH"
      | "_afterUpgradeHook"
      | "_callTargets"
      | "addSigners"
      | "avoForwarder"
      | "avoNonce"
      | "avoRegistry"
      | "avoSignersList"
      | "cast"
      | "castAuthorized"
      | "domainSeparatorV4"
      | "executeOperation"
      | "getSigDigest"
      | "getSigDigestAuthorized"
      | "index"
      | "initialize"
      | "isSigner"
      | "isValidSignature"
      | "nonSequentialNonces"
      | "occupyAvoNonces"
      | "occupyNonSequentialNonces"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "removeSignedMessage"
      | "removeSigners"
      | "requiredSigners"
      | "setRequiredSigners"
      | "signMessage"
      | "signers"
      | "signersCount"
      | "supportsInterface"
      | "upgradeTo"
      | "verify"
      | "verifyAuthorized"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACTION_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZED_FEE_COLLECTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZED_MAX_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZED_MIN_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAST_AUTHORIZED_PARAMS_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAST_AUTHORIZED_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAST_FORWARD_PARAMS_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAST_PARAMS_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAST_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SIGNERS_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE_HASH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_afterUpgradeHook",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "_callTargets",
    values: [
      AvocadoMultisigStructs.ActionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addSigners",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "avoForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "avoNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "avoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoSignersList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cast",
    values: [
      AvocadoMultisigStructs.CastParamsStruct,
      AvocadoMultisigStructs.CastForwardParamsStruct,
      AvocadoMultisigStructs.SignatureParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castAuthorized",
    values: [
      AvocadoMultisigStructs.CastParamsStruct,
      AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      AvocadoMultisigStructs.SignatureParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorV4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigDigest",
    values: [
      AvocadoMultisigStructs.CastParamsStruct,
      AvocadoMultisigStructs.CastForwardParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigDigestAuthorized",
    values: [
      AvocadoMultisigStructs.CastParamsStruct,
      AvocadoMultisigStructs.CastAuthorizedParamsStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "index", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonSequentialNonces",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "occupyAvoNonces",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "occupyNonSequentialNonces",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSignedMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigners",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredSigners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signMessage",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "signers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "signersCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      AvocadoMultisigStructs.CastParamsStruct,
      AvocadoMultisigStructs.CastForwardParamsStruct,
      AvocadoMultisigStructs.SignatureParamsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAuthorized",
    values: [
      AvocadoMultisigStructs.CastParamsStruct,
      AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      AvocadoMultisigStructs.SignatureParamsStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACTION_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZED_FEE_COLLECTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZED_MAX_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZED_MIN_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAST_AUTHORIZED_PARAMS_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAST_AUTHORIZED_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAST_FORWARD_PARAMS_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAST_PARAMS_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAST_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SIGNERS_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_afterUpgradeHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_callTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avoForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "avoNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoSignersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigDigest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigDigestAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "index", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonSequentialNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "occupyAvoNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "occupyNonSequentialNonces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSignedMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signersCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyAuthorized",
    data: BytesLike
  ): Result;

  events: {
    "AvoNonceOccupied(uint256)": EventFragment;
    "CastExecuted(address,address,address[],bytes)": EventFragment;
    "CastFailed(address,address,address[],string,bytes)": EventFragment;
    "FeePaid(uint256)": EventFragment;
    "FeePayFailed(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "ListSyncFailed()": EventFragment;
    "NonSequentialNonceOccupied(bytes32)": EventFragment;
    "RemoveSignedMessage(bytes32)": EventFragment;
    "RequiredSignersSet(uint8)": EventFragment;
    "SignedMessage(bytes32)": EventFragment;
    "SignerAdded(address)": EventFragment;
    "SignerRemoved(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvoNonceOccupied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePayFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListSyncFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonSequentialNonceOccupied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveSignedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequiredSignersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignedMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AvoNonceOccupiedEventObject {
  occupiedAvoNonce: BigNumber;
}
export type AvoNonceOccupiedEvent = TypedEvent<
  [BigNumber],
  AvoNonceOccupiedEventObject
>;

export type AvoNonceOccupiedEventFilter =
  TypedEventFilter<AvoNonceOccupiedEvent>;

export interface CastExecutedEventObject {
  source: string;
  caller: string;
  signers: string[];
  metadata: string;
}
export type CastExecutedEvent = TypedEvent<
  [string, string, string[], string],
  CastExecutedEventObject
>;

export type CastExecutedEventFilter = TypedEventFilter<CastExecutedEvent>;

export interface CastFailedEventObject {
  source: string;
  caller: string;
  signers: string[];
  reason: string;
  metadata: string;
}
export type CastFailedEvent = TypedEvent<
  [string, string, string[], string, string],
  CastFailedEventObject
>;

export type CastFailedEventFilter = TypedEventFilter<CastFailedEvent>;

export interface FeePaidEventObject {
  fee: BigNumber;
}
export type FeePaidEvent = TypedEvent<[BigNumber], FeePaidEventObject>;

export type FeePaidEventFilter = TypedEventFilter<FeePaidEvent>;

export interface FeePayFailedEventObject {
  fee: BigNumber;
}
export type FeePayFailedEvent = TypedEvent<
  [BigNumber],
  FeePayFailedEventObject
>;

export type FeePayFailedEventFilter = TypedEventFilter<FeePayFailedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface ListSyncFailedEventObject {}
export type ListSyncFailedEvent = TypedEvent<[], ListSyncFailedEventObject>;

export type ListSyncFailedEventFilter = TypedEventFilter<ListSyncFailedEvent>;

export interface NonSequentialNonceOccupiedEventObject {
  occupiedNonSequentialNonce: string;
}
export type NonSequentialNonceOccupiedEvent = TypedEvent<
  [string],
  NonSequentialNonceOccupiedEventObject
>;

export type NonSequentialNonceOccupiedEventFilter =
  TypedEventFilter<NonSequentialNonceOccupiedEvent>;

export interface RemoveSignedMessageEventObject {
  messageHash: string;
}
export type RemoveSignedMessageEvent = TypedEvent<
  [string],
  RemoveSignedMessageEventObject
>;

export type RemoveSignedMessageEventFilter =
  TypedEventFilter<RemoveSignedMessageEvent>;

export interface RequiredSignersSetEventObject {
  requiredSigners: number;
}
export type RequiredSignersSetEvent = TypedEvent<
  [number],
  RequiredSignersSetEventObject
>;

export type RequiredSignersSetEventFilter =
  TypedEventFilter<RequiredSignersSetEvent>;

export interface SignedMessageEventObject {
  messageHash: string;
}
export type SignedMessageEvent = TypedEvent<[string], SignedMessageEventObject>;

export type SignedMessageEventFilter = TypedEventFilter<SignedMessageEvent>;

export interface SignerAddedEventObject {
  signer: string;
}
export type SignerAddedEvent = TypedEvent<[string], SignerAddedEventObject>;

export type SignerAddedEventFilter = TypedEventFilter<SignerAddedEvent>;

export interface SignerRemovedEventObject {
  signer: string;
}
export type SignerRemovedEvent = TypedEvent<[string], SignerRemovedEventObject>;

export type SignerRemovedEventFilter = TypedEventFilter<SignerRemovedEvent>;

export interface UpgradedEventObject {
  newImplementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface AvoMultisigSafe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoMultisigSafeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    AUTHORIZED_FEE_COLLECTOR(overrides?: CallOverrides): Promise<[string]>;

    AUTHORIZED_MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    AUTHORIZED_MIN_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    CAST_AUTHORIZED_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CAST_AUTHORIZED_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    CAST_FORWARD_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    CAST_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<[string]>;

    MAX_SIGNERS_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    _afterUpgradeHook(
      fromImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _callTargets(
      actions_: AvocadoMultisigStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addSigners(
      addSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    avoForwarder(overrides?: CallOverrides): Promise<[string]>;

    avoNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    avoRegistry(overrides?: CallOverrides): Promise<[string]>;

    avoSignersList(overrides?: CallOverrides): Promise<[string]>;

    cast(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<[string]>;

    executeOperation(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      initiator_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSigDigest(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSigDigestAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    index(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isSigner(
      signer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { magicValue: string }>;

    nonSequentialNonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    occupyAvoNonces(
      avoNonces_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    occupyNonSequentialNonces(
      nonSequentialNonces_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeSignedMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSigners(
      removeSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requiredSigners(overrides?: CallOverrides): Promise<[number]>;

    setRequiredSigners(
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signers(
      overrides?: CallOverrides
    ): Promise<[string[]] & { signers_: string[] }>;

    signersCount(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      avoImplementation_: PromiseOrValue<string>,
      afterUpgradeHookData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  AUTHORIZED_FEE_COLLECTOR(overrides?: CallOverrides): Promise<string>;

  AUTHORIZED_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  AUTHORIZED_MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  CAST_AUTHORIZED_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CAST_AUTHORIZED_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CAST_FORWARD_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CAST_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CAST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<string>;

  MAX_SIGNERS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  _afterUpgradeHook(
    fromImplementation_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _callTargets(
    actions_: AvocadoMultisigStructs.ActionStruct[],
    id_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addSigners(
    addSigners_: PromiseOrValue<string>[],
    requiredSigners_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  avoForwarder(overrides?: CallOverrides): Promise<string>;

  avoNonce(overrides?: CallOverrides): Promise<BigNumber>;

  avoRegistry(overrides?: CallOverrides): Promise<string>;

  avoSignersList(overrides?: CallOverrides): Promise<string>;

  cast(
    params_: AvocadoMultisigStructs.CastParamsStruct,
    forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
    signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castAuthorized(
    params_: AvocadoMultisigStructs.CastParamsStruct,
    authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
    signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

  executeOperation(
    arg0: PromiseOrValue<string>[],
    arg1: PromiseOrValue<BigNumberish>[],
    arg2: PromiseOrValue<BigNumberish>[],
    initiator_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSigDigest(
    params_: AvocadoMultisigStructs.CastParamsStruct,
    forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getSigDigestAuthorized(
    params_: AvocadoMultisigStructs.CastParamsStruct,
    authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  index(overrides?: CallOverrides): Promise<number>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isSigner(
    signer_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    hash: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  nonSequentialNonces(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  occupyAvoNonces(
    avoNonces_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  occupyNonSequentialNonces(
    nonSequentialNonces_: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeSignedMessage(
    message_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSigners(
    removeSigners_: PromiseOrValue<string>[],
    requiredSigners_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requiredSigners(overrides?: CallOverrides): Promise<number>;

  setRequiredSigners(
    requiredSigners_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signMessage(
    message_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signers(overrides?: CallOverrides): Promise<string[]>;

  signersCount(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    avoImplementation_: PromiseOrValue<string>,
    afterUpgradeHookData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    params_: AvocadoMultisigStructs.CastParamsStruct,
    forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
    signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyAuthorized(
    params_: AvocadoMultisigStructs.CastParamsStruct,
    authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
    signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    AUTHORIZED_FEE_COLLECTOR(overrides?: CallOverrides): Promise<string>;

    AUTHORIZED_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    AUTHORIZED_MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    CAST_AUTHORIZED_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<string>;

    CAST_AUTHORIZED_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    CAST_FORWARD_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    CAST_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<string>;

    MAX_SIGNERS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    _afterUpgradeHook(
      fromImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    _callTargets(
      actions_: AvocadoMultisigStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addSigners(
      addSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    avoForwarder(overrides?: CallOverrides): Promise<string>;

    avoNonce(overrides?: CallOverrides): Promise<BigNumber>;

    avoRegistry(overrides?: CallOverrides): Promise<string>;

    avoSignersList(overrides?: CallOverrides): Promise<string>;

    cast(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { success_: boolean; revertReason_: string }
    >;

    castAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { success_: boolean; revertReason_: string }
    >;

    domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

    executeOperation(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      initiator_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getSigDigest(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getSigDigestAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    index(overrides?: CallOverrides): Promise<number>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isSigner(
      signer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    nonSequentialNonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    occupyAvoNonces(
      avoNonces_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    occupyNonSequentialNonces(
      nonSequentialNonces_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeSignedMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeSigners(
      removeSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requiredSigners(overrides?: CallOverrides): Promise<number>;

    setRequiredSigners(
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    signers(overrides?: CallOverrides): Promise<string[]>;

    signersCount(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      avoImplementation_: PromiseOrValue<string>,
      afterUpgradeHookData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AvoNonceOccupied(uint256)"(
      occupiedAvoNonce?: PromiseOrValue<BigNumberish> | null
    ): AvoNonceOccupiedEventFilter;
    AvoNonceOccupied(
      occupiedAvoNonce?: PromiseOrValue<BigNumberish> | null
    ): AvoNonceOccupiedEventFilter;

    "CastExecuted(address,address,address[],bytes)"(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      signers?: null,
      metadata?: null
    ): CastExecutedEventFilter;
    CastExecuted(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      signers?: null,
      metadata?: null
    ): CastExecutedEventFilter;

    "CastFailed(address,address,address[],string,bytes)"(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      signers?: null,
      reason?: null,
      metadata?: null
    ): CastFailedEventFilter;
    CastFailed(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      signers?: null,
      reason?: null,
      metadata?: null
    ): CastFailedEventFilter;

    "FeePaid(uint256)"(
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeePaidEventFilter;
    FeePaid(fee?: PromiseOrValue<BigNumberish> | null): FeePaidEventFilter;

    "FeePayFailed(uint256)"(
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeePayFailedEventFilter;
    FeePayFailed(
      fee?: PromiseOrValue<BigNumberish> | null
    ): FeePayFailedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "ListSyncFailed()"(): ListSyncFailedEventFilter;
    ListSyncFailed(): ListSyncFailedEventFilter;

    "NonSequentialNonceOccupied(bytes32)"(
      occupiedNonSequentialNonce?: PromiseOrValue<BytesLike> | null
    ): NonSequentialNonceOccupiedEventFilter;
    NonSequentialNonceOccupied(
      occupiedNonSequentialNonce?: PromiseOrValue<BytesLike> | null
    ): NonSequentialNonceOccupiedEventFilter;

    "RemoveSignedMessage(bytes32)"(
      messageHash?: PromiseOrValue<BytesLike> | null
    ): RemoveSignedMessageEventFilter;
    RemoveSignedMessage(
      messageHash?: PromiseOrValue<BytesLike> | null
    ): RemoveSignedMessageEventFilter;

    "RequiredSignersSet(uint8)"(
      requiredSigners?: PromiseOrValue<BigNumberish> | null
    ): RequiredSignersSetEventFilter;
    RequiredSignersSet(
      requiredSigners?: PromiseOrValue<BigNumberish> | null
    ): RequiredSignersSetEventFilter;

    "SignedMessage(bytes32)"(
      messageHash?: PromiseOrValue<BytesLike> | null
    ): SignedMessageEventFilter;
    SignedMessage(
      messageHash?: PromiseOrValue<BytesLike> | null
    ): SignedMessageEventFilter;

    "SignerAdded(address)"(
      signer?: PromiseOrValue<string> | null
    ): SignerAddedEventFilter;
    SignerAdded(signer?: PromiseOrValue<string> | null): SignerAddedEventFilter;

    "SignerRemoved(address)"(
      signer?: PromiseOrValue<string> | null
    ): SignerRemovedEventFilter;
    SignerRemoved(
      signer?: PromiseOrValue<string> | null
    ): SignerRemovedEventFilter;

    "Upgraded(address)"(
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      newImplementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    AUTHORIZED_FEE_COLLECTOR(overrides?: CallOverrides): Promise<BigNumber>;

    AUTHORIZED_MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    AUTHORIZED_MIN_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    CAST_AUTHORIZED_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CAST_AUTHORIZED_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    CAST_FORWARD_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CAST_PARAMS_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SIGNERS_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    _afterUpgradeHook(
      fromImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _callTargets(
      actions_: AvocadoMultisigStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addSigners(
      addSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    avoForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    avoNonce(overrides?: CallOverrides): Promise<BigNumber>;

    avoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    avoSignersList(overrides?: CallOverrides): Promise<BigNumber>;

    cast(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<BigNumber>;

    executeOperation(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      initiator_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSigDigest(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigDigestAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    index(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isSigner(
      signer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonSequentialNonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    occupyAvoNonces(
      avoNonces_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    occupyNonSequentialNonces(
      nonSequentialNonces_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeSignedMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSigners(
      removeSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requiredSigners(overrides?: CallOverrides): Promise<BigNumber>;

    setRequiredSigners(
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signers(overrides?: CallOverrides): Promise<BigNumber>;

    signersCount(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      avoImplementation_: PromiseOrValue<string>,
      afterUpgradeHookData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AUTHORIZED_FEE_COLLECTOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUTHORIZED_MAX_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AUTHORIZED_MIN_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAST_AUTHORIZED_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAST_AUTHORIZED_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAST_FORWARD_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAST_PARAMS_TYPE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_SIGNERS_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _afterUpgradeHook(
      fromImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _callTargets(
      actions_: AvocadoMultisigStructs.ActionStruct[],
      id_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addSigners(
      addSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    avoForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoSignersList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cast(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOperation(
      arg0: PromiseOrValue<string>[],
      arg1: PromiseOrValue<BigNumberish>[],
      arg2: PromiseOrValue<BigNumberish>[],
      initiator_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSigDigest(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigDigestAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    index(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isSigner(
      signer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      hash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonSequentialNonces(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    occupyAvoNonces(
      avoNonces_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    occupyNonSequentialNonces(
      nonSequentialNonces_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeSignedMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSigners(
      removeSigners_: PromiseOrValue<string>[],
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requiredSigners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequiredSigners(
      requiredSigners_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signMessage(
      message_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signersCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      avoImplementation_: PromiseOrValue<string>,
      afterUpgradeHookData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      forwardParams_: AvocadoMultisigStructs.CastForwardParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyAuthorized(
      params_: AvocadoMultisigStructs.CastParamsStruct,
      authorizedParams_: AvocadoMultisigStructs.CastAuthorizedParamsStruct,
      signaturesParams_: AvocadoMultisigStructs.SignatureParamsStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
