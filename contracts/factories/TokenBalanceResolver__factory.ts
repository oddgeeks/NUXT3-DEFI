/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  TokenBalanceResolver,
  TokenBalanceResolverInterface,
} from "../TokenBalanceResolver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "success",
                type: "bool",
              },
            ],
            internalType: "struct TokenBalanceResolver.TokenBalance[]",
            name: "balances",
            type: "tuple[]",
          },
        ],
        internalType: "struct TokenBalanceResolver.UserTokenBalances",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "tokenAddresses",
        type: "address[]",
      },
    ],
    name: "getBalancesForMultipleUsers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "balance",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "success",
                type: "bool",
              },
            ],
            internalType: "struct TokenBalanceResolver.TokenBalance[]",
            name: "balances",
            type: "tuple[]",
          },
        ],
        internalType: "struct TokenBalanceResolver.UserTokenBalances[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "getMultipleTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isToken",
            type: "bool",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        internalType: "struct TokenBalanceResolver.TokenInfo[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isToken",
            type: "bool",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint8",
            name: "decimals",
            type: "uint8",
          },
        ],
        internalType: "struct TokenBalanceResolver.TokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class TokenBalanceResolver__factory {
  static readonly abi = _abi;
  static createInterface(): TokenBalanceResolverInterface {
    return new utils.Interface(_abi) as TokenBalanceResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenBalanceResolver {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TokenBalanceResolver;
  }
}
