/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface GaslessWalletInterface extends utils.Interface {
  functions: {
    "cast(address[],bytes[],uint256[],bytes,uint256,uint256)": FunctionFragment;
    "castTypeHash()": FunctionFragment;
    "domainSeparatorName()": FunctionFragment;
    "domainSeparatorV4()": FunctionFragment;
    "domainSeparatorVersion()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owner()": FunctionFragment;
    "verify(address[],bytes[],uint256[],bytes,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cast"
      | "castTypeHash"
      | "domainSeparatorName"
      | "domainSeparatorV4"
      | "domainSeparatorVersion"
      | "initialize"
      | "nonce"
      | "owner"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cast",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castTypeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorV4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castTypeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "CastExecuted()": EventFragment;
    "CastFailed(string,address,bytes,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CastExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface CastExecutedEventObject {}
export type CastExecutedEvent = TypedEvent<[], CastExecutedEventObject>;

export type CastExecutedEventFilter = TypedEventFilter<CastExecutedEvent>;

export interface CastFailedEventObject {
  reason: string;
  target: string;
  data: string;
  value: BigNumber;
}
export type CastFailedEvent = TypedEvent<
  [string, string, string, BigNumber],
  CastFailedEventObject
>;

export type CastFailedEventFilter = TypedEventFilter<CastFailedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface GaslessWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaslessWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cast(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castTypeHash(overrides?: CallOverrides): Promise<[string]>;

    domainSeparatorName(overrides?: CallOverrides): Promise<[string]>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<[string]>;

    domainSeparatorVersion(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    verify(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  cast(
    targets: PromiseOrValue<string>[],
    datas: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BigNumberish>[],
    signature: PromiseOrValue<BytesLike>,
    validUntil: PromiseOrValue<BigNumberish>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castTypeHash(overrides?: CallOverrides): Promise<string>;

  domainSeparatorName(overrides?: CallOverrides): Promise<string>;

  domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

  domainSeparatorVersion(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  verify(
    targets: PromiseOrValue<string>[],
    datas: PromiseOrValue<BytesLike>[],
    values: PromiseOrValue<BigNumberish>[],
    signature: PromiseOrValue<BytesLike>,
    validUntil: PromiseOrValue<BigNumberish>,
    gas: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    cast(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    castTypeHash(overrides?: CallOverrides): Promise<string>;

    domainSeparatorName(overrides?: CallOverrides): Promise<string>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

    domainSeparatorVersion(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    verify(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CastExecuted()"(): CastExecutedEventFilter;
    CastExecuted(): CastExecutedEventFilter;

    "CastFailed(string,address,bytes,uint256)"(
      reason?: null,
      target?: null,
      data?: null,
      value?: null
    ): CastFailedEventFilter;
    CastFailed(
      reason?: null,
      target?: null,
      data?: null,
      value?: null
    ): CastFailedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    cast(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castTypeHash(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparatorName(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<BigNumber>;

    domainSeparatorVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cast(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castTypeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparatorName(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domainSeparatorVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verify(
      targets: PromiseOrValue<string>[],
      datas: PromiseOrValue<BytesLike>[],
      values: PromiseOrValue<BigNumberish>[],
      signature: PromiseOrValue<BytesLike>,
      validUntil: PromiseOrValue<BigNumberish>,
      gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
