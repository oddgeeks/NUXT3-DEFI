/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IAvoWallet {
  export type ActionStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type ActionStructOutput = [string, string, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
  };
}

export interface GaslessWalletInterface extends utils.Interface {
  functions: {
    "ACTION_TYPE_HASH()": FunctionFragment;
    "CAST_TYPE_HASH()": FunctionFragment;
    "DEFAULT_CHAIN_ID()": FunctionFragment;
    "DOMAIN_SEPARATOR_NAME()": FunctionFragment;
    "DOMAIN_SEPARATOR_VERSION()": FunctionFragment;
    "TYPE_HASH()": FunctionFragment;
    "_callTargets((address,bytes,uint256)[])": FunctionFragment;
    "avoForwarder()": FunctionFragment;
    "avoSafeNonce()": FunctionFragment;
    "avoVersionsRegistry()": FunctionFragment;
    "cast((address,bytes,uint256)[],uint256,uint256,address,bytes,bytes)": FunctionFragment;
    "domainSeparatorV4()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes,bool)": FunctionFragment;
    "verify((address,bytes,uint256)[],uint256,uint256,address,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACTION_TYPE_HASH"
      | "CAST_TYPE_HASH"
      | "DEFAULT_CHAIN_ID"
      | "DOMAIN_SEPARATOR_NAME"
      | "DOMAIN_SEPARATOR_VERSION"
      | "TYPE_HASH"
      | "_callTargets"
      | "avoForwarder"
      | "avoSafeNonce"
      | "avoVersionsRegistry"
      | "cast"
      | "domainSeparatorV4"
      | "initialize"
      | "onERC721Received"
      | "owner"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ACTION_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAST_TYPE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TYPE_HASH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_callTargets",
    values: [IAvoWallet.ActionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "avoForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoSafeNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoVersionsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cast",
    values: [
      IAvoWallet.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorV4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      IAvoWallet.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACTION_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAST_TYPE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TYPE_HASH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_callTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoSafeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoVersionsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "CastExecuted(address,address,bytes)": EventFragment;
    "CastFailed(address,address,string,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CastExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CastFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface CastExecutedEventObject {
  source: string;
  caller: string;
  metadata: string;
}
export type CastExecutedEvent = TypedEvent<
  [string, string, string],
  CastExecutedEventObject
>;

export type CastExecutedEventFilter = TypedEventFilter<CastExecutedEvent>;

export interface CastFailedEventObject {
  source: string;
  caller: string;
  reason: string;
  metadata: string;
}
export type CastFailedEvent = TypedEvent<
  [string, string, string, string],
  CastFailedEventObject
>;

export type CastFailedEventFilter = TypedEventFilter<CastFailedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
  avoWalletImpl: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface GaslessWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GaslessWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<[string]>;

    TYPE_HASH(overrides?: CallOverrides): Promise<[string]>;

    _callTargets(
      actions_: IAvoWallet.ActionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    avoForwarder(overrides?: CallOverrides): Promise<[string]>;

    avoSafeNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    avoVersionsRegistry(overrides?: CallOverrides): Promise<[string]>;

    cast(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      avoWalletImpl_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      forceCall_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  CAST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<string>;

  TYPE_HASH(overrides?: CallOverrides): Promise<string>;

  _callTargets(
    actions_: IAvoWallet.ActionStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  avoForwarder(overrides?: CallOverrides): Promise<string>;

  avoSafeNonce(overrides?: CallOverrides): Promise<BigNumber>;

  avoVersionsRegistry(overrides?: CallOverrides): Promise<string>;

  cast(
    actions_: IAvoWallet.ActionStruct[],
    validUntil_: PromiseOrValue<BigNumberish>,
    gas_: PromiseOrValue<BigNumberish>,
    source_: PromiseOrValue<string>,
    metadata_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

  initialize(
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    avoWalletImpl_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    avoWalletImpl_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    forceCall_: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    actions_: IAvoWallet.ActionStruct[],
    validUntil_: PromiseOrValue<BigNumberish>,
    gas_: PromiseOrValue<BigNumberish>,
    source_: PromiseOrValue<string>,
    metadata_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<string>;

    TYPE_HASH(overrides?: CallOverrides): Promise<string>;

    _callTargets(
      actions_: IAvoWallet.ActionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    avoForwarder(overrides?: CallOverrides): Promise<string>;

    avoSafeNonce(overrides?: CallOverrides): Promise<BigNumber>;

    avoVersionsRegistry(overrides?: CallOverrides): Promise<string>;

    cast(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string] & { success_: boolean; revertReason_: string }
    >;

    domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      avoWalletImpl_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      forceCall_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    verify(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CastExecuted(address,address,bytes)"(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      metadata?: null
    ): CastExecutedEventFilter;
    CastExecuted(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      metadata?: null
    ): CastExecutedEventFilter;

    "CastFailed(address,address,string,bytes)"(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      reason?: null,
      metadata?: null
    ): CastFailedEventFilter;
    CastFailed(
      source?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      reason?: null,
      metadata?: null
    ): CastFailedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Upgraded(address)"(
      avoWalletImpl?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      avoWalletImpl?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    _callTargets(
      actions_: IAvoWallet.ActionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    avoForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    avoSafeNonce(overrides?: CallOverrides): Promise<BigNumber>;

    avoVersionsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    cast(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      avoWalletImpl_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      forceCall_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTION_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CAST_TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TYPE_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _callTargets(
      actions_: IAvoWallet.ActionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    avoForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoSafeNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoVersionsRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cast(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      avoWalletImpl_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      forceCall_: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      actions_: IAvoWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
