/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IGaslessSmartWallet {
  export type ActionStruct = {
    target: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type ActionStructOutput = [string, string, BigNumber] & {
    target: string;
    data: string;
    value: BigNumber;
  };
}

export interface ForwarderInterface extends utils.Interface {
  functions: {
    "computeAddress(address)": FunctionFragment;
    "execute(address,(address,bytes,uint256)[],uint256,uint256,address,bytes,bytes)": FunctionFragment;
    "gswFactory()": FunctionFragment;
    "gswNonce(address)": FunctionFragment;
    "gswVersion(address)": FunctionFragment;
    "gswVersionName(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "verify(address,(address,bytes,uint256)[],uint256,uint256,address,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeAddress"
      | "execute"
      | "gswFactory"
      | "gswNonce"
      | "gswVersion"
      | "gswVersionName"
      | "initialize"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      PromiseOrValue<string>,
      IGaslessSmartWallet.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "gswFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gswNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gswVersion",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gswVersionName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<string>,
      IGaslessSmartWallet.ActionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gswFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gswNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gswVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gswVersionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "ExecuteFailed(address,address,address,bytes,string)": EventFragment;
    "Executed(address,address,address,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExecuteFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface ExecuteFailedEventObject {
  gswOwner: string;
  gswAddress: string;
  source: string;
  metadata: string;
  reason: string;
}
export type ExecuteFailedEvent = TypedEvent<
  [string, string, string, string, string],
  ExecuteFailedEventObject
>;

export type ExecuteFailedEventFilter = TypedEventFilter<ExecuteFailedEvent>;

export interface ExecutedEventObject {
  gswOwner: string;
  gswAddress: string;
  source: string;
  metadata: string;
}
export type ExecutedEvent = TypedEvent<
  [string, string, string, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface Forwarder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ForwarderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    execute(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gswFactory(overrides?: CallOverrides): Promise<[string]>;

    gswNonce(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gswVersion(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gswVersionName(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verify(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  computeAddress(
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  execute(
    from_: PromiseOrValue<string>,
    actions_: IGaslessSmartWallet.ActionStruct[],
    validUntil_: PromiseOrValue<BigNumberish>,
    gas_: PromiseOrValue<BigNumberish>,
    source_: PromiseOrValue<string>,
    metadata_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gswFactory(overrides?: CallOverrides): Promise<string>;

  gswNonce(
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gswVersion(
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  gswVersionName(
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verify(
    from_: PromiseOrValue<string>,
    actions_: IGaslessSmartWallet.ActionStruct[],
    validUntil_: PromiseOrValue<BigNumberish>,
    gas_: PromiseOrValue<BigNumberish>,
    source_: PromiseOrValue<string>,
    metadata_: PromiseOrValue<BytesLike>,
    signature_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    execute(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gswFactory(overrides?: CallOverrides): Promise<string>;

    gswNonce(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gswVersion(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    gswVersionName(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    verify(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ExecuteFailed(address,address,address,bytes,string)"(
      gswOwner?: PromiseOrValue<string> | null,
      gswAddress?: PromiseOrValue<string> | null,
      source?: PromiseOrValue<string> | null,
      metadata?: null,
      reason?: null
    ): ExecuteFailedEventFilter;
    ExecuteFailed(
      gswOwner?: PromiseOrValue<string> | null,
      gswAddress?: PromiseOrValue<string> | null,
      source?: PromiseOrValue<string> | null,
      metadata?: null,
      reason?: null
    ): ExecuteFailedEventFilter;

    "Executed(address,address,address,bytes)"(
      gswOwner?: PromiseOrValue<string> | null,
      gswAddress?: PromiseOrValue<string> | null,
      source?: PromiseOrValue<string> | null,
      metadata?: null
    ): ExecutedEventFilter;
    Executed(
      gswOwner?: PromiseOrValue<string> | null,
      gswAddress?: PromiseOrValue<string> | null,
      source?: PromiseOrValue<string> | null,
      metadata?: null
    ): ExecutedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gswFactory(overrides?: CallOverrides): Promise<BigNumber>;

    gswNonce(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gswVersion(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gswVersionName(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verify(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gswFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gswNonce(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gswVersion(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gswVersionName(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verify(
      from_: PromiseOrValue<string>,
      actions_: IGaslessSmartWallet.ActionStruct[],
      validUntil_: PromiseOrValue<BigNumberish>,
      gas_: PromiseOrValue<BigNumberish>,
      source_: PromiseOrValue<string>,
      metadata_: PromiseOrValue<BytesLike>,
      signature_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
