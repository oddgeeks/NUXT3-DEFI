/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AvoFactoryProxyInterface extends utils.Interface {
  functions: {
    "avoSafeBytecode()": FunctionFragment;
    "avoVersionsRegistry()": FunctionFragment;
    "avoWalletImpl()": FunctionFragment;
    "computeAddress(address)": FunctionFragment;
    "deploy(address)": FunctionFragment;
    "deployWithVersion(address,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAvoSafe(address)": FunctionFragment;
    "setAvoWalletImpl(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "avoSafeBytecode"
      | "avoVersionsRegistry"
      | "avoWalletImpl"
      | "computeAddress"
      | "deploy"
      | "deployWithVersion"
      | "initialize"
      | "isAvoSafe"
      | "setAvoWalletImpl"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "avoSafeBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoVersionsRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avoWalletImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWithVersion",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAvoSafe",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvoWalletImpl",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "avoSafeBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoVersionsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avoWalletImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployWithVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAvoSafe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAvoWalletImpl",
    data: BytesLike
  ): Result;

  events: {
    "AvoSafeDeployed(address,address)": EventFragment;
    "AvoSafeDeployedWithVersion(address,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvoSafeDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvoSafeDeployedWithVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface AvoSafeDeployedEventObject {
  owner: string;
  avoSafe: string;
}
export type AvoSafeDeployedEvent = TypedEvent<
  [string, string],
  AvoSafeDeployedEventObject
>;

export type AvoSafeDeployedEventFilter = TypedEventFilter<AvoSafeDeployedEvent>;

export interface AvoSafeDeployedWithVersionEventObject {
  owner: string;
  avoSafe: string;
  version: string;
}
export type AvoSafeDeployedWithVersionEvent = TypedEvent<
  [string, string, string],
  AvoSafeDeployedWithVersionEventObject
>;

export type AvoSafeDeployedWithVersionEventFilter =
  TypedEventFilter<AvoSafeDeployedWithVersionEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface AvoFactoryProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoFactoryProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    avoSafeBytecode(overrides?: CallOverrides): Promise<[string]>;

    avoVersionsRegistry(overrides?: CallOverrides): Promise<[string]>;

    avoWalletImpl(overrides?: CallOverrides): Promise<[string]>;

    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAvoSafe(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAvoWalletImpl(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  avoSafeBytecode(overrides?: CallOverrides): Promise<string>;

  avoVersionsRegistry(overrides?: CallOverrides): Promise<string>;

  avoWalletImpl(overrides?: CallOverrides): Promise<string>;

  computeAddress(
    owner_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    owner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployWithVersion(
    owner_: PromiseOrValue<string>,
    avoWalletVersion_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAvoSafe(
    avoSafe_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAvoWalletImpl(
    avoWalletImpl_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    avoSafeBytecode(overrides?: CallOverrides): Promise<string>;

    avoVersionsRegistry(overrides?: CallOverrides): Promise<string>;

    avoWalletImpl(overrides?: CallOverrides): Promise<string>;

    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAvoSafe(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAvoWalletImpl(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AvoSafeDeployed(address,address)"(
      owner?: PromiseOrValue<string> | null,
      avoSafe?: PromiseOrValue<string> | null
    ): AvoSafeDeployedEventFilter;
    AvoSafeDeployed(
      owner?: PromiseOrValue<string> | null,
      avoSafe?: PromiseOrValue<string> | null
    ): AvoSafeDeployedEventFilter;

    "AvoSafeDeployedWithVersion(address,address,address)"(
      owner?: PromiseOrValue<string> | null,
      avoSafe?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null
    ): AvoSafeDeployedWithVersionEventFilter;
    AvoSafeDeployedWithVersion(
      owner?: PromiseOrValue<string> | null,
      avoSafe?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null
    ): AvoSafeDeployedWithVersionEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    avoSafeBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    avoVersionsRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    avoWalletImpl(overrides?: CallOverrides): Promise<BigNumber>;

    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAvoSafe(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAvoWalletImpl(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avoSafeBytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoVersionsRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avoWalletImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeAddress(
      owner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      owner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      avoWalletVersion_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAvoSafe(
      avoSafe_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAvoWalletImpl(
      avoWalletImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
