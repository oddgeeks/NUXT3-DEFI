/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AvoMultisigFactoryProxyInterface extends utils.Interface {
  functions: {
    "avoImpl()": FunctionFragment;
    "avoRegistry()": FunctionFragment;
    "avocadoBytecode()": FunctionFragment;
    "avocadoCreationCode()": FunctionFragment;
    "computeAvocado(address,uint32)": FunctionFragment;
    "deploy(address,uint32)": FunctionFragment;
    "deployWithVersion(address,uint32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isAvocado(address)": FunctionFragment;
    "setAvoImpl(address)": FunctionFragment;
    "transientDeployData()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "avoImpl"
      | "avoRegistry"
      | "avocadoBytecode"
      | "avocadoCreationCode"
      | "computeAvocado"
      | "deploy"
      | "deployWithVersion"
      | "initialize"
      | "isAvocado"
      | "setAvoImpl"
      | "transientDeployData"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "avoImpl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "avoRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avocadoBytecode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "avocadoCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeAvocado",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWithVersion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAvocado",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAvoImpl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transientDeployData",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "avoImpl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avoRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avocadoBytecode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "avocadoCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAvocado",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployWithVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAvocado", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAvoImpl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transientDeployData",
    data: BytesLike
  ): Result;

  events: {
    "AvocadoDeployed(address,uint32,uint16,address)": EventFragment;
    "AvocadoDeployedWithVersion(address,uint32,uint16,address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AvocadoDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvocadoDeployedWithVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface AvocadoDeployedEventObject {
  owner: string;
  index: number;
  avoType: number;
  avocado: string;
}
export type AvocadoDeployedEvent = TypedEvent<
  [string, number, number, string],
  AvocadoDeployedEventObject
>;

export type AvocadoDeployedEventFilter = TypedEventFilter<AvocadoDeployedEvent>;

export interface AvocadoDeployedWithVersionEventObject {
  owner: string;
  index: number;
  avoType: number;
  avocado: string;
  version: string;
}
export type AvocadoDeployedWithVersionEvent = TypedEvent<
  [string, number, number, string, string],
  AvocadoDeployedWithVersionEventObject
>;

export type AvocadoDeployedWithVersionEventFilter =
  TypedEventFilter<AvocadoDeployedWithVersionEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface AvoMultisigFactoryProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AvoMultisigFactoryProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    avoImpl(overrides?: CallOverrides): Promise<[string]>;

    avoRegistry(overrides?: CallOverrides): Promise<[string]>;

    avocadoBytecode(overrides?: CallOverrides): Promise<[string]>;

    avocadoCreationCode(overrides?: CallOverrides): Promise<[string]>;

    computeAvocado(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { computedAddress_: string }>;

    deploy(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      avoVersion_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAvocado(
      avoSmartWallet_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAvoImpl(
      avoImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transientDeployData(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { version_: string; data_: BigNumber }>;
  };

  avoImpl(overrides?: CallOverrides): Promise<string>;

  avoRegistry(overrides?: CallOverrides): Promise<string>;

  avocadoBytecode(overrides?: CallOverrides): Promise<string>;

  avocadoCreationCode(overrides?: CallOverrides): Promise<string>;

  computeAvocado(
    owner_: PromiseOrValue<string>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    owner_: PromiseOrValue<string>,
    index_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployWithVersion(
    owner_: PromiseOrValue<string>,
    index_: PromiseOrValue<BigNumberish>,
    avoVersion_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAvocado(
    avoSmartWallet_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAvoImpl(
    avoImpl_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transientDeployData(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { version_: string; data_: BigNumber }>;

  callStatic: {
    avoImpl(overrides?: CallOverrides): Promise<string>;

    avoRegistry(overrides?: CallOverrides): Promise<string>;

    avocadoBytecode(overrides?: CallOverrides): Promise<string>;

    avocadoCreationCode(overrides?: CallOverrides): Promise<string>;

    computeAvocado(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      avoVersion_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isAvocado(
      avoSmartWallet_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAvoImpl(
      avoImpl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transientDeployData(
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { version_: string; data_: BigNumber }>;
  };

  filters: {
    "AvocadoDeployed(address,uint32,uint16,address)"(
      owner?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      avoType?: null,
      avocado?: PromiseOrValue<string> | null
    ): AvocadoDeployedEventFilter;
    AvocadoDeployed(
      owner?: PromiseOrValue<string> | null,
      index?: PromiseOrValue<BigNumberish> | null,
      avoType?: null,
      avocado?: PromiseOrValue<string> | null
    ): AvocadoDeployedEventFilter;

    "AvocadoDeployedWithVersion(address,uint32,uint16,address,address)"(
      owner?: PromiseOrValue<string> | null,
      index?: null,
      avoType?: null,
      avocado?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null
    ): AvocadoDeployedWithVersionEventFilter;
    AvocadoDeployedWithVersion(
      owner?: PromiseOrValue<string> | null,
      index?: null,
      avoType?: null,
      avocado?: PromiseOrValue<string> | null,
      version?: PromiseOrValue<string> | null
    ): AvocadoDeployedWithVersionEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    avoImpl(overrides?: CallOverrides): Promise<BigNumber>;

    avoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    avocadoBytecode(overrides?: CallOverrides): Promise<BigNumber>;

    avocadoCreationCode(overrides?: CallOverrides): Promise<BigNumber>;

    computeAvocado(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      avoVersion_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAvocado(
      avoSmartWallet_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAvoImpl(
      avoImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transientDeployData(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    avoImpl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avocadoBytecode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    avocadoCreationCode(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeAvocado(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployWithVersion(
      owner_: PromiseOrValue<string>,
      index_: PromiseOrValue<BigNumberish>,
      avoVersion_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAvocado(
      avoSmartWallet_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAvoImpl(
      avoImpl_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transientDeployData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
