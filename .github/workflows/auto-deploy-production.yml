name: production-deployment-automation

on:
  push:
    branches:
      - 'master'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_image:
    name: Build Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            event=push,type=sha,format=short
            event=tag,type=ref

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha, scope=avocado-frontend
          cache-to: type=gha, scope=avocado-frontend, mode=max

      - name: Update Deployment file
        run: |
          #!/bin/bash

          set -e
          set -o pipefail

          # Convert this to small case
          MATCH="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          MATCH=${MATCH,,}

          # Write the contents to a file
          echo "${{ steps.meta.outputs.tags }}" > tmp

          # Check if there is a vX.Y.Z | v.X.Y tag
          TAG=$({ grep -Poh "$MATCH:v\d+.\d+.?(\d+)?" tmp || true; })

          # If there is not, Go back to using sha-<short-commit-hash>
          if [ -z "${TAG}" ]; then
            TAG=$({ grep -Poh "$MATCH:sha-.+" tmp || true; })
          fi

          for file in $(ls deployments); do
            IMAGE_RESP=$({ grep -Poh '<IMAGE>' deployments/$file || true; })
            if [ -z "${IMAGE_RESP}" ]; then
              echo "deployments/$file does not contain <IMAGE> marker"
              exit 1;
            fi
            sed -i "s|<IMAGE>|$TAG|" deployments/$file;
          done

      - name: Upload Deployment file
        uses: actions/upload-artifact@v3
        with:
          name: k8s-deployment-config
          path: deployments
          retention-days: 1

  deploy_api:
    name: Deploy API
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: 'https://internal.avocado.link'
    needs: [ build_image ]
    permissions:
      contents: read
      packages: read
    steps:
      - name: Fetch Deployment file
        id: download
        uses: actions/download-artifact@v3
        with:
          name: k8s-deployment-config
      - name: Read CA Certificate
        run: |
          # Write CA to disk
          #!/bin/sh
          echo ${{ secrets.NYC_KUBERNETES_CERTIFICATE }} | base64 -d > ca.crt
      - name: Deploy to NYC Cluster
        run: kubectl apply -f ${{ steps.download.outputs.download-path }}/avocado-frontend.avocado.link.production.yml --kubeconfig=/dev/null --server="${{ secrets.NYC_KUBERNETES_ADDRESS }}" --token="${{ secrets.NYC_KUBERNETES_TOKEN }}" --certificate-authority=ca.crt
      - name: Verify NYC Deployment
        run: kubectl rollout status -n avocado deployment/avocado-frontend --server="${{ secrets.NYC_KUBERNETES_ADDRESS }}" --token="${{ secrets.NYC_KUBERNETES_TOKEN }}" --certificate-authority=ca.crt
      - name: Erase CA Certificate
        run: |
          # Erase CA from disk
          #!/bin/sh
          rm ca.crt
